generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL_DEV")
    directUrl = env("DIRECT_URL_DEV")
}

enum Plan {
    TRIAL
    PRO
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    id                   String  @id @default(cuid())
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Created 
    plan      Plan      @default(TRIAL)
    planStart DateTime?
    planEnd   DateTime?

    // Study Session
    workSession WorkSession[]
    files       File[]
}

model WorkSession {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    duration  Int?
    files     File[]
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    chat      Chat?
}

model Chat {
    id            String       @id @default(uuid())
    title         String
    path          String
    messages      Json
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    workSession   WorkSession? @relation(fields: [workSessionId], references: [id])
    workSessionId String?      @unique
}

model File {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    key         String
    bucket      String
    url         String?
    mimeType    String?
    type        FileType
    size        Int
    checksum    String // SHA256
    workSession WorkSession[]
    User        User?         @relation(fields: [userId], references: [id])
    userId      String?
}

enum FileType {
    IMAGE
    PDF
    VIDEO
    AUDIO
    DOCUMENT
}
