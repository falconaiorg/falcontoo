generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL_DEV")
    directUrl = env("DIRECT_URL_DEV")
}

enum Plan {
    TRIAL
    PRO
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    id                   String  @id @default(cuid())
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Created 
    plan      Plan      @default(TRIAL)
    planStart DateTime?
    planEnd   DateTime?

    // Study Session
    workSession WorkSession[]
    files       File[]

    // Resources
    articles    Article[]
    annotations Annotation[]

    // Chat
    chats Chat[]
}

model Article {
    id              String          @id @default(cuid())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    annotations     Annotation[]
    contentId       String
    content         ArticleContent  @relation(fields: [contentId], references: [id])
    User            User            @relation(fields: [userId], references: [id])
    userId          String
    layers          Layer[]
    readingProgress Float           @default(0)
    snoozedUntil    DateTime?
    context         ArticleContext?
}

// Check if the context is stale, if so, regenerate it

model ArticleContext {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    Article        Article  @relation(fields: [articleId], references: [id])
    articleId      String   @unique
    markdown       String
    linkedArticles String[] // top K articles related to this article
    isStale        Boolean  @default(false)
}

model ArticleContent {
    id               String    @id @default(cuid())
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    url              String
    title            String
    description      String?
    author           String
    publishedAt      DateTime
    readablityHtml   String
    markdown         String
    markdownChecksum String    @unique
    thumbnail        String?
    articles         Article[]
    layers           Layer[]
    isEmbedded       Boolean   @default(false)
    estimatedTime    Int       @default(5)
}

model Layer {
    id               String            @id @default(cuid())
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    name             String            @default("")
    layerType        LayerType
    annotations      LayerAnnotation[]
    ArticleContent   ArticleContent?   @relation(fields: [articleContentId], references: [id])
    articleContentId String?
    Article          Article?          @relation(fields: [articleId], references: [id])
    articleId        String?
}

enum LayerType {
    LOGICAL_FALLACIES
}

model LayerAnnotation {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    highlight String
    title     String?
    note      String?
    layer     Layer    @relation(fields: [layerId], references: [id])
    layerId   String
}

model Annotation {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    highlight String?
    note      String?
    article   Article  @relation(fields: [articleId], references: [id])
    articleId String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

// Sessions 
model WorkSession {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    duration  Int?
    files     File[]
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    chat      Chat?
}

model Chat {
    id            String       @id @default(uuid())
    title         String
    path          String
    messages      Json
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    workSession   WorkSession? @relation(fields: [workSessionId], references: [id])
    workSessionId String?      @unique
    User          User?        @relation(fields: [userId], references: [id])
    userId        String?
}

model File {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    key         String
    bucket      String
    url         String?
    mimeType    String?
    type        FileType
    size        Int
    checksum    String // SHA256
    workSession WorkSession[]
    User        User?         @relation(fields: [userId], references: [id])
    userId      String?
}

enum FileType {
    IMAGE
    PDF
    VIDEO
    AUDIO
    DOCUMENT
}
