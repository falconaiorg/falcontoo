generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL_DEV")
    directUrl = env("DIRECT_URL_DEV")
}

enum Plan {
    TRIAL
    PRO
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    id                   String  @id @default(cuid())
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Created 
    plan      Plan      @default(TRIAL)
    planStart DateTime?
    planEnd   DateTime?

    // Study Session
    workSession WorkSession[]
    files       File[]

    // Resources
    articles    Article[]
    annotations Annotation[]

    // Chat
    chats Chat[]

    // Stats
    stats      UserStats?
    dailyStats DailyUserStats[]

    // Reading Sessions
    readingSessions ReadingSession[]
    sprints         Sprint[]
    settings        Settings?
    about           About?

    // public profile
    PublicProfile PublicProfile?
    books         Book[]
}

model PublicProfile {
    id          String   @id @default(cuid())
    userId      String   @unique
    user        User     @relation(fields: [userId], references: [id])
    username    String   @unique
    bio         String?
    socialLinks Json?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    books       Book[]

    @@index([username])
}

model About {
    id               String   @id @default(cuid())
    userId           String   @unique
    user             User     @relation(fields: [userId], references: [id])
    bio              String?
    location         String?
    education        String?
    work             String?
    favouriteGenres  String[]
    favouriteAuthors String[]
    favouriteTopics  String[]
}

model Settings {
    id                 String  @id @default(cuid())
    userId             String  @unique
    user               User    @relation(fields: [userId], references: [id])
    // Notifications
    emailNotifications Boolean @default(true)
    pushNotifications  Boolean @default(true)

    // Appearance
    theme Theme @default(DARK)

    // Typography
    fontFamily String @default("Inter")
    fontSize   Int    @default(14)
    lineHeight Float  @default(1.5)
    padding    Int    @default(10)

    // Reading
    readingSpeed Int @default(200)

    // AI 
    aiVoice AIVoice @default(AUTO)
}

enum AIVoice {
    AUTO
}

enum Theme {
    LIGHT
    DARK
}

// ! Stats Models
model UserStats {
    id                 String    @id @default(cuid())
    userId             String    @unique
    user               User      @relation(fields: [userId], references: [id])
    totalReadingTime   Int       @default(0)
    currentStreak      Int       @default(0)
    longestStreak      Int       @default(0)
    bestReadingDay     DateTime?
    bestReadingDayTime Int       @default(0)
}

model DailyUserStats {
    id           String   @id @default(cuid())
    date         DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id])
    totalTime    Int      @default(0)
    activeTime   Int      @default(0)
    articlesRead Int      @default(0)

    @@unique([date, userId])
}

// ! Article Models
model Article {
    id              String            @id @default(cuid())
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    annotations     Annotation[]
    contentId       String
    content         ArticleContent    @relation(fields: [contentId], references: [id])
    User            User              @relation(fields: [userId], references: [id])
    userId          String
    layers          Layer[]
    snoozedUntil    DateTime?
    context         ArticleContext?
    // Reading Sessions
    sessionArticles SessionArticles[]
    sprintArticles  SprintArticle[]

    // Stats
    readingProgress Float @default(0)
    rating          Int   @default(0)
}

// Check if the context is stale, if so, regenerate it

model ArticleContext {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    Article         Article  @relation(fields: [articleId], references: [id])
    articleId       String   @unique
    markdown        String?
    linkedArticles  String[] // top K articles related to this article
    isStale         Boolean  @default(false)
    analysis        Json?
    analysisVersion String?
}

model ArticleContent {
    id               String    @id @default(cuid())
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    url              String
    title            String
    description      String?
    author           String
    publishedAt      DateTime
    readablityHtml   String
    markdown         String
    markdownChecksum String    @unique
    thumbnail        String?
    articles         Article[]
    layers           Layer[]
    isEmbedded       Boolean   @default(false)
    estimatedTime    Int       @default(5)
}

// Reading Sprint 

model Sprint {
    id             String          @id @default(cuid())
    userId         String
    user           User            @relation(fields: [userId], references: [id])
    createdAt      DateTime        @default(now())
    startedAt      DateTime?
    completedAt    DateTime?
    duration       Int // Duration in milliseconds
    status         SprintStatus
    sprintArticles SprintArticle[]
}

model SprintArticle {
    id          String    @id @default(cuid())
    sprintId    String
    sprint      Sprint    @relation(fields: [sprintId], references: [id])
    articleId   String
    article     Article   @relation(fields: [articleId], references: [id])
    order       Int // Order of the article in the sprint
    isCompleted Boolean   @default(false)
    startedAt   DateTime?
    completedAt DateTime?
}

enum SprintStatus {
    CREATED
    IN_PROGRESS
    COMPLETED
    ABANDONED
}

// Reading Sessions

model ReadingSession {
    id              String            @id @default(cuid())
    createdAt       DateTime          @default(now()) // used as start time
    updatedAt       DateTime          @default(now()) // used as end time
    userId          String
    user            User              @relation(fields: [userId], references: [id])
    sessionArticles SessionArticles[]
    // Stats
    activeTime      Int               @default(0)
    idleTime        Int               @default(0)
    totalTime       Int               @default(0)
    completed       Boolean           @default(false)
    startTime       DateTime          @default(now())
    endTime         DateTime? // New field
}

model SessionArticles {
    id               String         @id @default(cuid())
    readingSessionId String
    articleId        String
    readingSession   ReadingSession @relation(fields: [readingSessionId], references: [id])
    article          Article        @relation(fields: [articleId], references: [id])
    // Stats
    activeTime       Int            @default(0)
    idleTime         Int            @default(0)
    totalTime        Int            @default(0)

    @@unique([readingSessionId, articleId])
}

// ! Book Models
model Book {
    id              String         @id @default(cuid())
    comment         String?
    user            User           @relation(fields: [userId], references: [id])
    userId          String
    createdAt       DateTime       @default(now())
    rating          Int?
    status          ReadingStatus  @default(READING)
    tags            String[]
    metadata        BookMetadata?  @relation(fields: [medtadataId], references: [id])
    medtadataId     String?
    PublicProfile   PublicProfile? @relation(fields: [publicProfileId], references: [id])
    publicProfileId String?
}

enum ReadingStatus {
    READING
    READ
    TO_READ
}

model BookMetadata {
    id            String   @id @default(cuid())
    googleBooksId String   @unique
    title         String
    description   String?
    authors       String[]
    thumbnail     String?
    userBooks     Book[]
}

// ! Annotation Models
// Layers
model Layer {
    id               String            @id @default(cuid())
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    name             String            @default("")
    layerType        LayerType
    annotations      LayerAnnotation[]
    ArticleContent   ArticleContent?   @relation(fields: [articleContentId], references: [id])
    articleContentId String?
    Article          Article?          @relation(fields: [articleId], references: [id])
    articleId        String?
}

enum LayerType {
    LOGICAL_FALLACIES
}

model LayerAnnotation {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    highlight String
    title     String?
    note      String?
    layer     Layer    @relation(fields: [layerId], references: [id])
    layerId   String
}

model Annotation {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    highlight String?
    note      String?
    article   Article  @relation(fields: [articleId], references: [id])
    articleId String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

// Sessions 
model WorkSession {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    duration  Int?
    files     File[]
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    chat      Chat?
}

// Chat Models
model Chat {
    id            String       @id @default(uuid())
    title         String
    path          String
    messages      Json
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    workSession   WorkSession? @relation(fields: [workSessionId], references: [id])
    workSessionId String?      @unique
    User          User?        @relation(fields: [userId], references: [id])
    userId        String?
}

// File Models
model File {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    key         String
    bucket      String
    url         String?
    mimeType    String?
    type        FileType
    size        Int
    checksum    String // SHA256
    workSession WorkSession[]
    User        User?         @relation(fields: [userId], references: [id])
    userId      String?
}

enum FileType {
    IMAGE
    PDF
    VIDEO
    AUDIO
    DOCUMENT
}
